{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toggle",
  "type": "registry:ui",
  "title": "Toggle",
  "author": "Saad",
  "description": "A Simple Toggle component",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "src/registry/components/ui/toggle.tsx",
      "content": "'use client'\r\n\r\nimport * as React from 'react'\r\nimport { cn } from '@/lib/utils'\r\n\r\nimport { useAnimate } from 'motion/react'\r\n\r\nexport interface ToggleProps\r\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onClick'> {\r\n  isOn: boolean,\r\n  toggleOn: () => void\r\n}\r\n\r\nconst Toggle = React.forwardRef<HTMLDivElement, ToggleProps>(\r\n  ({ className, isOn, toggleOn, ...props }, ref) => {\r\n    const [scope, animate] = useAnimate();\r\n\r\n    const isMounted = React.useRef(true);\r\n\r\n    React.useEffect(() => {\r\n      if (isMounted.current) {\r\n        isMounted.current = false;\r\n        return;\r\n      }\r\n\r\n      (async () => {\r\n        // To fix the sudden jerk if 'isOn' is true be default\r\n        scope.current.style.marginLeft = !isOn ? 'auto' : 0\r\n\r\n        await animate(\r\n          scope.current,\r\n          {\r\n            width: '2.5rem'\r\n          },\r\n          {\r\n            duration: 0.15\r\n          }\r\n        ).finished;\r\n\r\n        scope.current.style.marginLeft = isOn ? 'auto' : 0\r\n\r\n        await animate(\r\n          scope.current,\r\n          {\r\n            width: '1.25rem',\r\n          },\r\n          {\r\n            duration: 0.15\r\n          }\r\n        ).finished;\r\n      })();\r\n    }, [isOn, animate, scope]);\r\n\r\n    return (\r\n      <div\r\n        className={cn(\r\n          'w-12 p-1 rounded-full shadow-[0_1px_1px_rgba(0,0,0,0.05),0_4px_6px_rgba(34,42,53,0.04),0_24px_68px_rgba(47,48,55,0.05),0_2px_3px_rgba(0,0,0,0.04)] cursor-pointer relative transition-colors duration-200',\r\n          isOn ? 'bg-neutral-800 dark:bg-neutral-300' : 'bg-neutral-300 dark:bg-neutral-800',\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n        onClick={toggleOn}\r\n      >\r\n        <div\r\n          ref={scope}\r\n          className={cn(\r\n            'h-5 w-5 rounded-full bg-white dark:bg-black',\r\n            isOn && 'ml-auto'\r\n          )}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nToggle.displayName = 'Toggle'\r\n\r\nexport { Toggle }\r\n\r\n\r\n// function comp() {\r\n//   return (\r\n//     <motion.div variants={optionsVariant} className={cn(\r\n//       'flex items-center text-sm relative h-full w-full rounded-full px-4',\r\n//       doubleToggleOn ? 'text-primary-foreground justify-between' : 'text-primary/70 justify-center'\r\n//     )}>\r\n    \r\n//       {/* Sub Slider */}\r\n//       <motion.div\r\n//         initial={{\r\n//           x: '-1rem',\r\n//           color: 'black'\r\n//         }}\r\n//         animate={{\r\n//           x: value === options.grouped.subOptions[0] ? '-1rem' : '4.8rem'\r\n//         }}\r\n//         transition={{\r\n//           type: 'tween'\r\n//         }}\r\n//         className={cn(\r\n//           'h-9.5 w-1/2 absolute bg-primary-foreground rounded-full transition-colors duration-200',\r\n//           !doubleToggleOn && 'opacity-0'\r\n//         )}\r\n//       />\r\n    \r\n//       <div\r\n//         onClick={() => toggleOptions(options.grouped.subOptions[0])}\r\n//         className={`relative transition-colors duration-500 text-primary ${options.grouped.subOptions.includes(value) && (value === options.grouped.subOptions[0] ? 'text-red-600' : 'text-blue-600')}`}\r\n//       >\r\n//         {options.grouped.subOptions[0]}\r\n//       </div>\r\n    \r\n//       <IconPointFilled className={`my-auto transition-all duration-500 ${doubleToggleOn && 'opacity-0 scale-80'}`} size={12} />\r\n    \r\n//       <div\r\n//         onClick={() => toggleOptions(options.grouped.subOptions[1])}\r\n//         className={`relative transition-colors duration-500 ${options.grouped.subOptions.includes(value) && (value === options.grouped.subOptions[1] ? 'text-red-600' : 'text-blue-600')}`}\r\n//       >\r\n//         {options.grouped.subOptions[1]}\r\n//       </div>\r\n//     </motion.div>\r\n//   )\r\n// }",
      "type": "registry:ui"
    }
  ]
}